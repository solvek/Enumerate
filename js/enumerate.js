// Generated by CoffeeScript 1.4.0
(function() {
  var Analyze, Average, Engine, engine,
    __slice = [].slice;

  Analyze = {
    UNDEFINED: 0,
    SUCCESS: 1,
    FAIL: -1
  };

  Average = (function() {

    function Average() {
      this.value = 0.0;
      this.count = 0;
    }

    Average.prototype.add = function(val) {
      var next;
      next = this.count + 1;
      this.value *= this.count / next;
      this.value += val / next;
      return this.count = next;
    };

    return Average;

  })();

  Engine = (function() {

    function Engine() {}

    Engine.prototype.start = function(options) {
      this._options = options;
      this.reset();
      return this.execute();
    };

    Engine.prototype.reset = function() {
      this.values = [];
      this.size = 0;
      this.status = Analyze.UNDEFINED;
      return this._lastTicks = -1;
    };

    Engine.prototype.execute = function() {
      var enumerator, last, value, _ref;
      while (true) {
        this.status = this.analyze();
        if (this.status === Analyze.SUCCESS) {
          this.trigger('onSolution', this.pureValues());
          if (!this._options.all) {
            break;
          }
        }
        if (this.status !== Analyze.FAIL) {
          enumerator = this.nextEnumerator();
          if (enumerator) {
            value = (_ref = this.values[this.size]) != null ? _ref : {
              avr: new Average
            };
            value.raw = 0;
            value.enumerator = enumerator;
            value.avr.add(enumerator.count);
            this.addValue(value);
            continue;
          }
        }
        while (this.size > 0) {
          last = this.values[this.size - 1];
          if (this.onStateRemove) {
            this.onStateRemove(last);
          }
          this.size--;
          if (last.raw < last.enumerator.count - 1) {
            last.raw++;
            this.addValue(last);
            break;
          }
        }
        if (this.size === 0) {
          break;
        }
      }
      return this.trigger('onComplete');
    };

    Engine.prototype.addValue = function(value) {
      var ticksPerOne;
      value.value = value.enumerator.toValue(value.raw);
      ticksPerOne = this.size === 0 ? this._options.ticks : this.values[this.size - 1].ticksPerOne;
      value.ticksPerOne = ticksPerOne / value.avr.value;
      value.ticks = (this.size === 0 ? 0 : this.values[this.size - 1].ticks) + Math.floor(value.ticksPerOne * value.raw);
      if (value.ticks > this._lastTicks) {
        this.trigger('onProgress', value.ticks, this.pureValues());
        this._lastTicks = value.ticks;
      }
      if (this.onStateAdd) {
        this.onStateAdd(value);
      }
      return this.values[this.size++] = value;
    };

    Engine.prototype.trigger = function() {
      var args, method;
      method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return postMessage(JSON.stringify({
        method: method,
        args: args
      }));
    };

    Engine.prototype.pureValues = function() {
      return this.values.map(function(item) {
        return item.enumerator.toString(item.value, item.raw);
      });
    };

    Engine.maxSum = 226;

    Engine.first = {
      count: 9,
      toValue: function(row) {
        return 24 + row;
      },
      toString: function(value) {
        return "(" + value + ")";
      }
    };

    Engine.rest = function(prev) {
      return {
        count: 2,
        toValue: function(row) {
          return prev + row * 2 - 1;
        },
        toString: function(value) {
          return "(" + value + ")";
        }
      };
    };

    Engine.prototype.nextEnumerator = function() {
      if (this.size < 8) {
        if (this.size === 0) {
          return Engine.first;
        } else {
          return Engine.rest(this.values[this.size - 1].value);
        }
      }
    };

    Engine.prototype.analyze = function() {
      if (this.sum === void 0) {
        this.sum = 0;
      }
      if (this.sum > Engine.maxSum) {
        return Analyze.FAIL;
      } else if (this.size === 8 && this.sum === Engine.maxSum) {
        return Analyze.SUCCESS;
      } else {
        return Analyze.UNDEFINED;
      }
    };

    Engine.prototype.onStateRemove = function(state) {
      return this.sum -= state.value;
    };

    Engine.prototype.onStateAdd = function(state) {
      if (this.sum === void 0) {
        this.sum = 0;
      }
      return this.sum += state.value;
    };

    return Engine;

  })();

  engine = new Engine();

  addEventListener('message', function(event) {
    var message;
    message = JSON.parse(event.data);
    return engine[message.method].apply(engine, message.args);
  });

}).call(this);
