// Generated by CoffeeScript 1.6.1
(function() {
  var EngineManager,
    __slice = [].slice;

  EngineManager = (function() {

    function EngineManager(ui, solver) {
      var _this = this;
      this.ui = ui;
      this.solver = solver;
      this.worker = new Worker('js/enumerate.js');
      this.worker.onmessage = function(event) {
        var message, method;
        message = JSON.parse(event.data);
        method = _this[message.method];
        if (method) {
          return method.apply(_this, message.args);
        }
      };
    }

    EngineManager.DEFAULT_OPTIONS = {
      ticks: 100,
      all: false
    };

    EngineManager.prototype.start = function(options) {
      if (options) {
        this.options = _.defaults(options, EngineManager.DEFAULT_OPTIONS);
      } else {
        this.options = EngineManager.DEFAULT_OPTIONS;
      }
      this.invokeWorker('start', this.options);
      this.ui.solutions.empty();
      return this.ui.progressbar.progressbar({
        max: this.options.ticks
      });
    };

    EngineManager.prototype.log = function(message) {
      return console.log("Worker: " + message);
    };

    EngineManager.prototype.onSolution = function(values) {
      return this.ui.solutions.append("<li>" + (EngineManager.printValues(values)) + "</li>");
    };

    EngineManager.prototype.onProgress = function(ticks, values) {
      this.ui.status.html(EngineManager.printValues(values));
      this.ui.progressbar.progressbar('value', ticks);
      return this.ui.progressLabel.text("" + (Math.floor(100.0 * ticks / this.options.ticks)) + "%");
    };

    EngineManager.prototype.onComplete = function() {
      this.ui.status.html('Completed');
      this.ui.progressbar.progressbar('value', this.options.ticks);
      return this.ui.progressLabel.text('Completed');
    };

    EngineManager.prototype.invokeWorker = function() {
      var args, method;
      method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      return this.worker.postMessage(JSON.stringify({
        method: method,
        args: args
      }));
    };

    EngineManager.printValues = function(values) {
      if (_.isArray(values)) {
        return _.reduce(values, function(str, item) {
          if (str.length > 0) {
            str += '-';
          }
          return str += "<" + item + ">";
        }, '');
      } else {
        return values.toString();
      }
    };

    return EngineManager;

  })();

  $(function() {
    var enman, ui;
    ui = {
      status: $('#status'),
      progressbar: $('#progressbar'),
      progressLabel: $('.progress-label'),
      solutions: $('#solutions')
    };
    enman = new EngineManager(ui);
    $('#play').button({
      text: false,
      icons: {
        primary: 'ui-icon-play'
      }
    }).click(function() {
      return enman.start({
        all: $('#all').is(':checked')
      });
    });
    return $('#all').button();
  });

}).call(this);
